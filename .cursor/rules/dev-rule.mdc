---
description: 
globs: 
alwaysApply: true
---
# Cursor Project Rules for Easy Note Browser Extension

## Language Requirements
- **Project Language**: All code, documentation, variable names, function names, and commit messages MUST be in English
- **Code Comments**: All code comments MUST be written in Chinese (中文) - **THIS IS THE ONLY EXCEPTION**
- **Debug Output**: All debugging output (console.log, console.error, etc.) MUST be in English
- **Documentation**: README files and user-facing documentation should be in English
- **UI Text**: User interface text should be in English for broader accessibility

**Important**: Only code comments use Chinese. Everything else (variable names, function names, debug output, documentation, UI text, commit messages, etc.) uses English.

## Code Style & Standards

### General Coding Principles
- Use clear, descriptive variable and function names in English
- Follow camelCase for JavaScript variables and functions
- Use PascalCase for classes and constructors
- Use UPPER_SNAKE_CASE for constants
- Keep functions small and focused on a single responsibility

### Comment Guidelines
- All code comments must be in Chinese
- Use `//` for single-line comments in Chinese
- Use `/* */` for multi-line comments in Chinese
- Document complex logic, algorithms, and business rules in Chinese
- Explain the "why" not just the "what" in comments

### File Organization
- Keep related functionality grouped together
- Use meaningful file names in English
- Organize files by feature/functionality
- Maintain clear separation between content scripts, background scripts, and UI components

## Browser Extension Specific Guidelines

### Manifest.json
- Follow Chrome Extension Manifest V3 standards
- Use semantic versioning for version numbers
- Include all necessary permissions with minimal scope
- Provide clear descriptions in English

### Content Scripts
- Minimize DOM manipulation impact
- Use proper event listeners and cleanup
- Handle page navigation gracefully
- Avoid conflicts with existing page scripts

### Background Scripts
- Use service workers efficiently
- Handle extension lifecycle events properly
- Implement proper error handling and logging
- Maintain clean state management

### UI Components
- Design for accessibility and responsiveness
- Follow consistent styling patterns
- Use semantic HTML structure
- Implement proper keyboard navigation

## Error Handling & Debugging
- Implement comprehensive error handling with Chinese comments explaining error scenarios
- Use console.log/console.error/console.warn with descriptive English messages ONLY
- All debugging output and error messages must be in English for universal understanding
- Create fallback mechanisms for critical functionality
- Document known issues and workarounds in Chinese comments

## Performance Guidelines
- Minimize memory usage and CPU impact
- Optimize for different browser environments
- Implement lazy loading where appropriate
- Profile and monitor extension performance

## Security Best Practices
- Sanitize all user inputs
- Use Content Security Policy (CSP) appropriately
- Minimize permissions to only what's necessary
- Validate data from external sources

## Git & Version Control
- Use English for commit messages following conventional commits format
- Create meaningful branch names in English
- Write pull request descriptions in English
- Tag releases with semantic versioning

## Testing & Quality Assurance
- Write unit tests with English test descriptions
- Test across multiple browser versions
- Verify functionality in different environments
- Document test cases and expected behaviors

## Documentation Standards
- Maintain up-to-date README.md in English
- Document API usage and integration points
- Include setup and development instructions
- Provide troubleshooting guides

## Code Review Guidelines
- Review code for adherence to these rules
- Ensure Chinese comments are clear and helpful
- Verify English naming conventions are followed
- Check for security and performance implications

## Examples

**Key Points for Examples:**
- Code comments: Chinese only (中文)
- All other content: English only (variable names, function names, debug output, error messages, etc.)

### Good Code Example:
```javascript
// 初始化侧边栏组件并设置事件监听器
function initializeSidebar() {
    const sidebarElement = document.getElementById('easynote-sidebar');
    
    // 检查侧边栏是否已经存在，避免重复创建
    if (sidebarElement) {
        return;
    }
    
    // 创建新的侧边栏容器
    const sidebar = createSidebarContainer();
    setupEventListeners(sidebar);
}

// 处理用户输入并保存笔记到本地存储
async function saveNoteToStorage(noteContent) {
    try {
        // 验证笔记内容不为空
        if (!noteContent.trim()) {
            throw new Error('Note content cannot be empty');
        }
        
        // 保存到Chrome存储API
        await chrome.storage.local.set({
            'user_note': noteContent,
            'last_modified': Date.now()
        });
    } catch (error) {
        // 记录错误并显示用户友好的消息
        console.error('Failed to save note:', error);
        showErrorMessage('Unable to save note');
    }
}
```

### Bad Code Example:
```javascript
// Create sidebar - 创建侧边栏 (混合语言注释)
function chuangJianCeBianLan() { // 中文函数名
    const ce_bian_lan = document.getElementById('sidebar'); // 中英混合变量名
    
    // Check if exists
    if (ce_bian_lan) {
        return;
    }
    
    // 新建容器
    const xin_rong_qi = createContainer();
}
```

Remember: Consistency is key. Follow these rules throughout the entire project to maintain code quality and readability. 